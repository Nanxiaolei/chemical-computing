;; Analyzed by ClojureScript 0.0-2850
{:defs {max-reaction {:protocol-inline nil, :name gamma.core/max-reaction, :variadic false, :file "src/gamma/core.cljs", :end-column 20, :method-params ([molecule-a molecule-b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj}, :variadic false, :max-fixed-arity 2}), :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([molecule-a molecule-b])), :test true}, move-molecule {:protocol-inline nil, :name gamma.core/move-molecule, :variadic false, :file "src/gamma/core.cljs", :end-column 21, :method-params ([p__10045 collide?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [x y dx dy], :as molecule} collide?])), :test true}, max-to-99 {:protocol-inline nil, :name gamma.core/max-to-99, :variadic false, :file "src/gamma/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 193, :end-line 193, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, step {:file "src/gamma/core.cljs", :line 18, :column 1, :end-line 18, :end-column 11, :test true, :name gamma.core/step}, molecule-reaction {:protocol-inline nil, :name gamma.core/molecule-reaction, :variadic false, :file "src/gamma/core.cljs", :end-column 25, :method-params ([mol-state reaction-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 116, :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mol-state reaction-fn])), :test true}, primes-to-100 {:protocol-inline nil, :name gamma.core/primes-to-100, :variadic false, :file "src/gamma/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 185, :end-line 185, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, pick-color {:protocol-inline nil, :name gamma.core/pick-color, :variadic false, :file "src/gamma/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 69, :end-line 69, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, height {:file "src/gamma/core.cljs", :line 14, :column 1, :end-line 14, :end-column 13, :test true, :name gamma.core/height}, example-primes-mols {:file "src/gamma/core.cljs", :line 175, :column 1, :end-line 175, :end-column 26, :test true, :name gamma.core/example-primes-mols}, clear {:protocol-inline nil, :name gamma.core/clear, :variadic false, :file "src/gamma/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 36, :end-line 36, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, tick {:protocol-inline nil, :name gamma.core/tick, :variadic false, :file "src/gamma/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 142, :end-line 142, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, prime-reaction {:protocol-inline nil, :name gamma.core/prime-reaction, :variadic false, :file "src/gamma/core.cljs", :end-column 22, :method-params ([molecule-a molecule-b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj}, :variadic false, :max-fixed-arity 2}), :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([molecule-a molecule-b])), :test true}, setText {:protocol-inline nil, :name gamma.core/setText, :variadic false, :file "src/gamma/core.cljs", :end-column 15, :method-params ([context color style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists (quote ([context color style])), :test true}, run {:protocol-inline nil, :name gamma.core/run, :variadic false, :file "src/gamma/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 157, :end-line 157, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, setup-mols {:protocol-inline nil, :name gamma.core/setup-mols, :variadic false, :file "src/gamma/core.cljs", :end-column 18, :method-params ([init-mols reaction-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2}), :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([init-mols reaction-fn])), :test true}, restart {:protocol-inline nil, :name gamma.core/restart, :variadic false, :file "src/gamma/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 169, :end-line 169, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, small-example-max {:protocol-inline nil, :name gamma.core/small-example-max, :variadic false, :file "src/gamma/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 189, :end-line 189, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, find-collision {:protocol-inline nil, :name gamma.core/find-collision, :variadic false, :file "src/gamma/core.cljs", :end-column 22, :method-params ([molecule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([molecule])), :test true}, collide? {:protocol-inline nil, :name gamma.core/collide?, :variadic false, :file "src/gamma/core.cljs", :end-column 16, :method-params ([molecule x y molecule-d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 4}), :line 77, :end-line 77, :max-fixed-arity 4, :fn-var true, :arglists (quote ([molecule x y molecule-d])), :test true}, draw-molecule {:protocol-inline nil, :name gamma.core/draw-molecule, :variadic false, :file "src/gamma/core.cljs", :end-column 21, :method-params ([p__10037]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y val color]}])), :test true}, draw-molecules {:protocol-inline nil, :name gamma.core/draw-molecules, :variadic false, :file "src/gamma/core.cljs", :end-column 22, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :test true}, width {:file "src/gamma/core.cljs", :line 13, :column 1, :end-line 13, :end-column 12, :test true, :name gamma.core/width}, start {:protocol-inline nil, :name gamma.core/start, :variadic false, :file "src/gamma/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 163, :end-line 163, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, background {:file "src/gamma/core.cljs", :line 15, :column 1, :end-line 15, :end-column 17, :test true, :name gamma.core/background}, colors {:file "src/gamma/core.cljs", :line 19, :column 1, :end-line 19, :end-column 13, :test true, :name gamma.core/colors}, running {:file "src/gamma/core.cljs", :line 21, :column 1, :end-line 21, :end-column 14, :test true, :name gamma.core/running}, time-loop {:protocol-inline nil, :name gamma.core/time-loop, :variadic false, :file "src/gamma/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 0}), :line 151, :end-line 151, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, canvas {:file "src/gamma/core.cljs", :line 11, :column 1, :end-line 11, :end-column 13, :test true, :name gamma.core/canvas}, setup {:protocol-inline nil, :name gamma.core/setup, :variadic false, :file "src/gamma/core.cljs", :end-column 13, :method-params ([vals reaction-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 2}), :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vals reaction-fn])), :test true}, gen-molecule {:protocol-inline nil, :name gamma.core/gen-molecule, :variadic false, :file "src/gamma/core.cljs", :end-column 20, :method-params ([id val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id val])), :test true}, world {:file "src/gamma/core.cljs", :line 20, :column 1, :end-line 20, :end-column 16, :test true, :name gamma.core/world}, gen-molecules {:protocol-inline nil, :name gamma.core/gen-molecules, :variadic false, :file "src/gamma/core.cljs", :end-column 21, :method-params ([vals]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vals])), :test true}, setLoading {:protocol-inline nil, :name gamma.core/setLoading, :variadic false, :file "src/gamma/core.cljs", :end-column 18, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :test true}, measurement {:protocol-inline nil, :name gamma.core/measurement, :variadic false, :file "src/gamma/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{seq cljs.core/IList}, :variadic false, :max-fixed-arity 0}), :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, example-maxs-mols {:file "src/gamma/core.cljs", :line 178, :column 1, :end-line 178, :end-column 24, :test true, :name gamma.core/example-maxs-mols}, stop {:protocol-inline nil, :name gamma.core/stop, :variadic false, :file "src/gamma/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 166, :end-line 166, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, setColor {:protocol-inline nil, :name gamma.core/setColor, :variadic false, :file "src/gamma/core.cljs", :end-column 16, :method-params ([context color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context color])), :test true}, opacity {:file "src/gamma/core.cljs", :line 17, :column 1, :end-line 17, :end-column 14, :test true, :name gamma.core/opacity}, rand-dx-dy {:protocol-inline nil, :name gamma.core/rand-dx-dy, :variadic false, :file "src/gamma/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 0}), :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, small-example-primes {:protocol-inline nil, :name gamma.core/small-example-primes, :variadic false, :file "src/gamma/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 181, :end-line 181, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, context {:file "src/gamma/core.cljs", :line 12, :column 1, :end-line 12, :end-column 14, :test true, :name gamma.core/context}, d {:file "src/gamma/core.cljs", :line 16, :column 1, :end-line 16, :end-column 8, :test true, :name gamma.core/d}}, :name gamma.core, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, >! cljs.core.async, alts! cljs.core.async}, :requires {ev enfocus.events, enfocus.events enfocus.events, ef enfocus.core, enfocus.core enfocus.core, cljs.core.async cljs.core.async}, :imports nil}