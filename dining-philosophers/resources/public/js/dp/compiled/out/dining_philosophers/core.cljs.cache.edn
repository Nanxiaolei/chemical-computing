;; Analyzed by ClojureScript 0.0-2850
{:defs {eat {:protocol-inline nil, :name dining-philosophers.core/eat, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 11, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, max-reaction {:protocol-inline nil, :name dining-philosophers.core/max-reaction, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 20, :method-params ([molecule-a molecule-b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj}, :variadic false, :max-fixed-arity 2}), :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([molecule-a molecule-b])), :test true}, move-molecule {:protocol-inline nil, :name dining-philosophers.core/move-molecule, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 21, :method-params ([p__9360 collide?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [x y d dx dy], :as molecule} collide?])), :test true}, step {:file "src/dining_philosophers/core.cljs", :line 15, :column 1, :end-line 15, :end-column 11, :test true, :name dining-philosophers.core/step}, molecule-reaction {:protocol-inline nil, :name dining-philosophers.core/molecule-reaction, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 25, :method-params ([mol-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 178, :end-line 178, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol-state])), :test true}, height {:file "src/dining_philosophers/core.cljs", :line 12, :column 1, :end-line 12, :end-column 13, :test true, :name dining-philosophers.core/height}, clear {:protocol-inline nil, :name dining-philosophers.core/clear, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 39, :end-line 39, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, tick {:protocol-inline nil, :name dining-philosophers.core/tick, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 201, :end-line 201, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, higher-order-capture {:protocol-inline nil, :name dining-philosophers.core/higher-order-capture, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 28, :method-params ([fn-mol val-mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fn-mol val-mol])), :test true}, setText {:protocol-inline nil, :name dining-philosophers.core/setText, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 15, :method-params ([context color style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 30, :end-line 30, :max-fixed-arity 3, :fn-var true, :arglists (quote ([context color style])), :test true}, run {:protocol-inline nil, :name dining-philosophers.core/run, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 213, :end-line 213, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, setup-mols {:protocol-inline nil, :name dining-philosophers.core/setup-mols, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 18, :method-params ([init-mols]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([init-mols])), :test true}, dining-philosophers {:protocol-inline nil, :name dining-philosophers.core/dining-philosophers, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 310, :end-line 310, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, higher-order-reaction {:protocol-inline nil, :name dining-philosophers.core/higher-order-reaction, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 29, :method-params ([mol1 mol2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mol1 mol2])), :test true}, higher-order-eval {:protocol-inline nil, :name dining-philosophers.core/higher-order-eval, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 25, :method-params ([fn-mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn-mol])), :test true}, gen-think-philosopher-molecule {:protocol-inline nil, :name dining-philosophers.core/gen-think-philosopher-molecule, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 38, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 256, :end-line 256, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, collision-reaction {:protocol-inline nil, :name dining-philosophers.core/collision-reaction, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 26, :method-params ([mstate collision-mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mstate collision-mol])), :test true}, gen-fork-molecule {:protocol-inline nil, :name dining-philosophers.core/gen-fork-molecule, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 25, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 245, :end-line 245, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, find-collision {:protocol-inline nil, :name dining-philosophers.core/find-collision, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 22, :method-params ([molecule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([molecule])), :test true}, collide? {:protocol-inline nil, :name dining-philosophers.core/collide?, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 16, :method-params ([molecule x y molecule-d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 4}), :line 82, :end-line 82, :max-fixed-arity 4, :fn-var true, :arglists (quote ([molecule x y molecule-d])), :test true}, draw-molecule {:protocol-inline nil, :name dining-philosophers.core/draw-molecule, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 21, :method-params ([p__9355]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y d val color args]}])), :test true}, draw-molecules {:protocol-inline nil, :name dining-philosophers.core/draw-molecules, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 22, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :test true}, gen-eat-philosopher-molecule {:protocol-inline nil, :name dining-philosophers.core/gen-eat-philosopher-molecule, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 36, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 267, :end-line 267, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, width {:file "src/dining_philosophers/core.cljs", :line 11, :column 1, :end-line 11, :end-column 12, :test true, :name dining-philosophers.core/width}, start {:protocol-inline nil, :name dining-philosophers.core/start, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 219, :end-line 219, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, background {:file "src/dining_philosophers/core.cljs", :line 13, :column 1, :end-line 13, :end-column 17, :test true, :name dining-philosophers.core/background}, dining-mols {:file "src/dining_philosophers/core.cljs", :line 303, :column 1, :end-line 303, :end-column 18, :test true, :name dining-philosophers.core/dining-mols}, colors {:file "src/dining_philosophers/core.cljs", :line 16, :column 1, :end-line 16, :end-column 13, :test true, :name dining-philosophers.core/colors}, think {:protocol-inline nil, :name dining-philosophers.core/think, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 13, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, mol-id-counter {:file "src/dining_philosophers/core.cljs", :line 19, :column 1, :end-line 19, :end-column 21, :test true, :name dining-philosophers.core/mol-id-counter}, hatch {:protocol-inline nil, :name dining-philosophers.core/hatch, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 13, :method-params ([mstate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mstate])), :test true}, get-forks {:protocol-inline nil, :name dining-philosophers.core/get-forks, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 17, :method-params ([tp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 227, :end-line 227, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tp])), :test true}, running {:file "src/dining_philosophers/core.cljs", :line 18, :column 1, :end-line 18, :end-column 14, :test true, :name dining-philosophers.core/running}, time-loop {:protocol-inline nil, :name dining-philosophers.core/time-loop, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 0}), :line 207, :end-line 207, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, gen-molecule-by-val {:protocol-inline nil, :name dining-philosophers.core/gen-molecule-by-val, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 27, :method-params ([val x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([val x])), :test true}, canvas {:file "src/dining_philosophers/core.cljs", :line 9, :column 1, :end-line 9, :end-column 13, :test true, :name dining-philosophers.core/canvas}, gen-molecule {:protocol-inline nil, :name dining-philosophers.core/gen-molecule, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 20, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :test true}, hatch? {:protocol-inline nil, :name dining-philosophers.core/hatch?, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 14, :method-params ([mstate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean clj-nil}, :variadic false, :max-fixed-arity 1}), :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mstate])), :test true}, world {:file "src/dining_philosophers/core.cljs", :line 17, :column 1, :end-line 17, :end-column 16, :test true, :name dining-philosophers.core/world}, gen-molecules {:protocol-inline nil, :name dining-philosophers.core/gen-molecules, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 21, :method-params ([vals]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vals])), :test true}, setLoading {:protocol-inline nil, :name dining-philosophers.core/setLoading, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 18, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :test true}, stop {:protocol-inline nil, :name dining-philosophers.core/stop, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 222, :end-line 222, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, react-fn-ready-to-eval? {:protocol-inline nil, :name dining-philosophers.core/react-fn-ready-to-eval?, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 31, :method-params ([react-fn arglist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([react-fn arglist])), :test true}, setColor {:protocol-inline nil, :name dining-philosophers.core/setColor, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 16, :method-params ([context color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context color])), :test true}, opacity {:file "src/dining_philosophers/core.cljs", :line 14, :column 1, :end-line 14, :end-column 14, :test true, :name dining-philosophers.core/opacity}, gen-eat-molecule {:protocol-inline nil, :name dining-philosophers.core/gen-eat-molecule, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 24, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 278, :end-line 278, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, rand-dx-dy {:protocol-inline nil, :name dining-philosophers.core/rand-dx-dy, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 0}), :line 77, :end-line 77, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, gen-think-molecule {:protocol-inline nil, :name dining-philosophers.core/gen-think-molecule, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 26, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 290, :end-line 290, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, context {:file "src/dining_philosophers/core.cljs", :line 10, :column 1, :end-line 10, :end-column 14, :test true, :name dining-philosophers.core/context}, draw-circle {:protocol-inline nil, :name dining-philosophers.core/draw-circle, :variadic false, :file "src/dining_philosophers/core.cljs", :end-column 19, :method-params ([context color diam x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 5}), :line 44, :end-line 44, :max-fixed-arity 5, :fn-var true, :arglists (quote ([context color diam x y])), :test true}}, :name dining-philosophers.core, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, >! cljs.core.async}, :requires {cljs.core.async cljs.core.async}, :imports nil}