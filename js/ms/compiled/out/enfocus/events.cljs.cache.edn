;; Analyzed by ClojureScript 0.0-2850
{:defs {unlisten {:protocol-inline nil, :name enfocus.events/unlisten, :variadic false, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 16, :method-params ([event] [event func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1} {:tag function, :variadic false, :max-fixed-arity 2}), :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event] [event func])), :doc "removing a specific event from the selected nodes", :test true}, gen-enter-leave-wrapper {:protocol-inline nil, :name enfocus.events/gen-enter-leave-wrapper, :variadic false, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 31, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag object, :variadic false, :max-fixed-arity 1}), :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :test true}, get-vp-monitor {:protocol-inline nil, :name enfocus.events/get-vp-monitor, :variadic false, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "needed to support window :resize", :test true}, get-node-chain {:protocol-inline nil, :private true, :name enfocus.events/get-node-chain, :variadic false, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 23, :method-params ([top node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([top node])), :test true}, child-of? {:protocol-inline nil, :name enfocus.events/child-of?, :variadic false, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 17, :method-params ([parent child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent child])), :doc "returns true if the node(child) is a child of parent", :test true}, view-port-monitor {:file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :line 13, :column 1, :end-line 13, :end-column 24, :test true, :name enfocus.events/view-port-monitor}, mouse-enter-leave {:protocol-inline nil, :name enfocus.events/mouse-enter-leave, :variadic false, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 25, :method-params ([func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([func])), :doc "this is used to build cross browser versions of :mouseenter and :mouseleave events", :test true}, wrapper-register {:file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :line 46, :column 1, :end-line 46, :end-column 23, :test true, :name enfocus.events/wrapper-register}, listen {:protocol-inline nil, :name enfocus.events/listen, :variadic false, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 14, :method-params ([event func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 2}), :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event func])), :doc "adding an event to the selected nodes", :test true}, remove-listeners {:protocol-inline nil, :name enfocus.events/remove-listeners, :variadic true, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 24, :method-params ([event-list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic true, :max-fixed-arity 0}), :line 61, :end-line 61, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& event-list])), :doc "removing all listeners of a given event type from the selected nodes", :test true}, listen-live {:protocol-inline nil, :name enfocus.events/listen-live, :variadic false, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 19, :method-params ([event selector func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 3}), :line 93, :end-line 93, :max-fixed-arity 3, :fn-var true, :arglists (quote ([event selector func])), :test true}, create-event {:protocol-inline nil, :private true, :name enfocus.events/create-event, :variadic false, :file "resources/public/js/ms/compiled/out/enfocus/events.cljs", :end-column 21, :method-params ([cur cur-event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cur cur-event])), :test true}}, :name enfocus.events, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {obj goog.object, goog.object goog.object, ef enfocus.core, enfocus.core enfocus.core, dom goog.dom, goog.dom goog.dom, goog.events goog.events, events goog.events}, :imports nil}