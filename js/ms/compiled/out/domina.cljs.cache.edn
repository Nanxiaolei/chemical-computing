;; Analyzed by ClojureScript 0.0-2850
{:defs {re-tag-name {:file "resources/public/js/ms/compiled/out/domina.cljs", :line 21, :column 1, :end-line 21, :end-column 18, :test true, :name domina/re-tag-name}, get-data {:protocol-inline nil, :name domina/get-data, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 16, :method-params ([node key] [node key bubble]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2} {:tag #{any clj-nil}, :variadic false, :max-fixed-arity 3}), :line 402, :end-line 402, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node key] [node key bubble])), :doc "Returns data associated with a node for a given key. Assumes\n  content is a single node. If the bubble parameter is set to true,\n  will search parent nodes if the key is not found.", :test true}, string-to-dom {:protocol-inline nil, :private true, :name domina/string-to-dom, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, remove-extraneous-tbody! {:protocol-inline nil, :private true, :name domina/remove-extraneous-tbody!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 33, :method-params ([div html tag-name start-wrap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 4}), :line 42, :end-line 42, :max-fixed-arity 4, :fn-var true, :arglists (quote ([div html tag-name start-wrap])), :test true}, swap-content! {:protocol-inline nil, :name domina/swap-content!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 21, :method-params ([old-content new-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists (quote ([old-content new-content])), :doc "Given some old content and some new content, replaces the old content with new content. If there are multiple nodes in the old content, replaces each of them and clones the new content as necessary.", :test true}, set-html! {:protocol-inline nil, :name domina/set-html!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 17, :method-params ([content inner-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 395, :end-line 395, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content inner-content])), :doc "Sets the innerHTML value for all the nodes in the given content.", :test true}, log {:protocol-inline nil, :name domina/log, :variadic true, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 11, :method-params ([mesg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 0}), :line 116, :end-line 116, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& mesg])), :test true}, *debug* {:file "resources/public/js/ms/compiled/out/domina.cljs", :line 111, :column 1, :end-line 111, :end-column 14, :test true, :name domina/*debug*}, set-value! {:protocol-inline nil, :name domina/set-value!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 18, :method-params ([content value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 357, :end-line 357, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content value])), :doc "Sets the value of all the nodes (presumably form fields) in the given content.", :test true}, set-style! {:protocol-inline nil, :name domina/set-style!, :variadic true, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 18, :method-params ([content name value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 2}), :line 222, :end-line 222, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content name & value])), :doc "Sets the value of a CSS property for each node in the content. Name may be a string or keyword. Value will be cast to a string, multiple values wil be concatenated.", :test true}, destroy-children! {:protocol-inline nil, :name domina/destroy-children!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 25, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 201, :end-line 201, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Removes all the child nodes in a content from the DOM. Returns the original content.", :test true}, lazy-nl-via-item {:protocol-inline nil, :private true, :name domina/lazy-nl-via-item, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 25, :method-params ([nl] [nl n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 2}), :line 444, :end-line 444, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nl] [nl n])), :test true}, classes {:protocol-inline nil, :name domina/classes, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 15, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag seq, :variadic false, :max-fixed-arity 1}), :line 322, :end-line 322, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns a seq of all the CSS classes currently applied to a node. Assumes content is a single node.", :test true}, re-xhtml-tag {:file "resources/public/js/ms/compiled/out/domina.cljs", :line 20, :column 1, :end-line 20, :end-column 19, :test true, :name domina/re-xhtml-tag}, has-class? {:protocol-inline nil, :name domina/has-class?, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 18, :method-params ([content class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 296, :end-line 296, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content class])), :doc "Returns true if the node has the specified CSS class. Assumes content is a single node.", :test true}, set-attr! {:protocol-inline nil, :name domina/set-attr!, :variadic true, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 17, :method-params ([content name value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 2}), :line 229, :end-line 229, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content name & value])), :doc "Sets the value of an HTML property for each node in the content. Name may be a string or keyword. Value will be cast to a string, multiple values wil be concatenated.", :test true}, text {:protocol-inline nil, :name domina/text, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 12, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns the text of a node. Assumes content is a single node. For consistency across browsers, will always trim whitespace of the beginning and end of the returned text.", :test true}, attr {:protocol-inline nil, :name domina/attr, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 12, :method-params ([content name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content name])), :doc "Gets the value of an HTML attribute. Assumes content will be a single node. Name may be a stirng or keyword. Returns nil if there is no value set for the style.", :test true}, html {:protocol-inline nil, :name domina/html, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 12, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 364, :end-line 364, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns the innerHTML of a node. Assumes content is a single node.", :test true}, set-attrs! {:protocol-inline nil, :name domina/set-attrs!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 18, :method-params ([content attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 289, :end-line 289, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content attrs])), :doc "Sets the specified attributes for each node in the content, given a map of names and values. Names may be a string or keyword. Values will be cast to a string, multiple values wil be concatenated.", :test true}, normalize-seq {:protocol-inline nil, :name domina/normalize-seq, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 21, :method-params ([list-thing]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{seq cljs.core/IList cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 1}), :line 478, :end-line 478, :max-fixed-arity 1, :fn-var true, :arglists (quote ([list-thing])), :doc "Some versions of IE have things that are like arrays in that they\n  respond to .length, but are not arrays nor NodeSets. This returns a\n  real sequence view of such objects. If passed an object that is not\n  a logical sequence at all, returns a single-item seq containing the\n  object.", :test true}, DomContent {:protocol-symbol true, :name domina/DomContent, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 25, :column 1, :line 105, :protocol-info {:methods {nodes [[content]], single-node [[nodeseq]]}}, :info nil, :end-line 105, :impls #{default string}, :test true}, children {:protocol-inline nil, :name domina/children, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 16, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Gets all the child nodes of the elements in a content. Same as (xpath content '*') but more efficient.", :test true}, destroy! {:protocol-inline nil, :name domina/destroy!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 16, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Removes all the nodes in a content from the DOM. Returns nil.", :test true}, by-id {:protocol-inline nil, :name domina/by-id, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 13, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Returns content containing a single node by looking up the given ID", :test true}, set-text! {:protocol-inline nil, :name domina/set-text!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 17, :method-params ([content value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 345, :end-line 345, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content value])), :doc "Sets the text value of all the nodes in the given content.", :test true}, restore-leading-whitespace! {:protocol-inline nil, :private true, :name domina/restore-leading-whitespace!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 36, :method-params ([div html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([div html])), :test true}, add-class! {:protocol-inline nil, :name domina/add-class!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 18, :method-params ([content class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 301, :end-line 301, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content class])), :doc "Adds the specified CSS class to each node in the content.", :test true}, lazy-nl-via-array-ref {:protocol-inline nil, :private true, :name domina/lazy-nl-via-array-ref, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 30, :method-params ([nl] [nl n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 1} {:tag #{cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 2}), :line 451, :end-line 451, :max-fixed-arity 2, :fn-var true, :arglists (quote ([nl] [nl n])), :test true}, set-classes! {:protocol-inline nil, :name domina/set-classes!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 20, :method-params ([content classes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 327, :end-line 327, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content classes])), :doc "Sets the class attribute of the content nodes to classes, which can\n  be either a class attribute string or a seq of classname strings.", :test true}, insert-before! {:protocol-inline nil, :name domina/insert-before!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 22, :method-params ([content new-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content new-content])), :doc "Given a content and some new content, inserts the new content immediately before the reference content. If there is more than one node in the reference content, clones the new content for each one.", :test true}, remove-class! {:protocol-inline nil, :name domina/remove-class!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 21, :method-params ([content class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 308, :end-line 308, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content class])), :doc "Removes the specified CSS class from each node in the content.", :test true}, detach! {:protocol-inline nil, :name domina/detach!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 15, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Removes all the nodes in a content from the DOM and returns them.", :test true}, re-no-inner-html {:file "resources/public/js/ms/compiled/out/domina.cljs", :line 22, :column 1, :end-line 22, :end-column 23, :test true, :name domina/re-no-inner-html}, value {:protocol-inline nil, :name domina/value, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 13, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 352, :end-line 352, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns the value of a node (presumably a form field). Assumes content is a single node.", :test true}, array-like? {:protocol-inline nil, :private true, :name domina/array-like?, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 20, :method-params ([obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil boolean any}, :variadic false, :max-fixed-arity 1}), :line 472, :end-line 472, :max-fixed-arity 1, :fn-var true, :arglists (quote ([obj])), :test true}, set-inner-html! {:protocol-inline nil, :private true, :name domina/set-inner-html!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 24, :method-params ([content html-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 375, :end-line 375, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content html-string])), :test true}, insert-after! {:protocol-inline nil, :name domina/insert-after!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 21, :method-params ([content new-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 179, :end-line 179, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content new-content])), :doc "Given a content and some new content, inserts the new content immediately after the reference content. If there is more than one node in the reference content, clones the new content for each one.", :test true}, append! {:protocol-inline nil, :name domina/append!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 15, :method-params ([parent-content child-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent-content child-content])), :doc "Given a parent and child contents, appends each of the children to all of the parents. If there is more than one node in the parent content, clones the children for the additional parents. Returns the parent content.", :test true}, html-to-dom {:protocol-inline nil, :name domina/html-to-dom, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 19, :method-params ([html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([html])), :doc "takes an string of html and returns a NodeList of dom fragments", :test true}, single-node {:protocol-inline nil, :protocol domina/DomContent, :name domina/single-node, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 16, :method-params ([nodeseq]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 105, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodeseq])), :test true}, insert! {:protocol-inline nil, :name domina/insert!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 15, :method-params ([parent-content child-content idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 161, :end-line 161, :max-fixed-arity 3, :fn-var true, :arglists (quote ([parent-content child-content idx])), :doc "Given a parent and child contents, appends each of the children to all of the parents at the specified index. If there is more than one node in the parent content, clones the children for the additional parents. Returns the parent content.", :test true}, lazy-nodelist {:protocol-inline nil, :private true, :name domina/lazy-nodelist, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 22, :method-params ([nl]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 1}), :line 458, :end-line 458, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nl])), :doc "A lazy seq view of a js/NodeList, or other array-like javascript things", :test true}, re-html {:file "resources/public/js/ms/compiled/out/domina.cljs", :line 18, :column 1, :end-line 18, :end-column 14, :test true, :name domina/re-html}, set-styles! {:protocol-inline nil, :name domina/set-styles!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 19, :method-params ([content styles]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 282, :end-line 282, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content styles])), :doc "Sets the specified CSS styles for each node in the content, given a map of names and values. Style names may be keywords or strings.", :test true}, log-debug {:protocol-inline nil, :name domina/log-debug, :variadic true, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 17, :method-params ([mesg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 0}), :line 112, :end-line 112, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& mesg])), :test true}, remove-attr! {:protocol-inline nil, :name domina/remove-attr!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 20, :method-params ([content name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content name])), :doc "Removes the specified HTML property for each node in the content. Name may be a string or keyword.", :test true}, apply-with-cloning {:protocol-inline nil, :private true, :name domina/apply-with-cloning, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 27, :method-params ([f parent-content child-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 3}), :line 426, :end-line 426, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f parent-content child-content])), :doc "Takes a two-arg function, a reference DomContent and new\n  DomContent. Applies the function for each reference / content\n  combination. Uses clones of the new content for each additional\n  parent after the first.", :test true}, re-leading-whitespace {:file "resources/public/js/ms/compiled/out/domina.cljs", :line 19, :column 1, :end-line 19, :end-column 28, :test true, :name domina/re-leading-whitespace}, set-data! {:protocol-inline nil, :name domina/set-data!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 17, :method-params ([node key value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 414, :end-line 414, :max-fixed-arity 3, :fn-var true, :arglists (quote ([node key value])), :doc "Sets a data on the node for a given key. Assumes content is a\n  single node. Data should be ClojureScript values and data structures\n  only; using other objects as data may result in memory leaks on some\n  browsers.", :test true}, style {:protocol-inline nil, :name domina/style, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 13, :method-params ([content name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 211, :end-line 211, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content name])), :doc "Gets the value of a CSS property. Assumes content will be a single node. Name may be a string or keyword. Returns nil if there is no value set for the style.", :test true}, wrap-map {:file "resources/public/js/ms/compiled/out/domina.cljs", :line 27, :column 3, :end-line 27, :end-column 17, :test true, :name domina/wrap-map}, parse-style-attributes {:protocol-inline nil, :name domina/parse-style-attributes, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 30, :method-params ([style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists (quote ([style])), :doc "Parses a CSS style string and returns the properties as a map.", :test true}, nodes {:protocol-inline nil, :protocol domina/DomContent, :name domina/nodes, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 10, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 105, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :test true}, toggle-class! {:protocol-inline nil, :name domina/toggle-class!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 21, :method-params ([content class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 315, :end-line 315, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content class])), :doc "Toggles the specified CSS class from each node in the content.", :test true}, clone {:protocol-inline nil, :name domina/clone, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 13, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns a deep clone of content.", :test true}, ancestor? {:protocol-inline nil, :name domina/ancestor?, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 17, :method-params ([ancestor-content descendant-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ancestor-content descendant-content])), :doc "Returns true if the first argument is an ancestor of the second argument. Presumes both arguments are single-node contents.", :test true}, common-ancestor {:protocol-inline nil, :name domina/common-ancestor, :variadic true, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 23, :method-params ([contents]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 137, :end-line 137, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& contents])), :doc "Returns the deepest common ancestor of the argument contents (which are presumed to be single nodes), or nil if they are from different documents.", :test true}, replace-children! {:protocol-inline nil, :private true, :name domina/replace-children!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 26, :method-params ([content inner-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 369, :end-line 369, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content inner-content])), :test true}, prepend! {:protocol-inline nil, :name domina/prepend!, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 16, :method-params ([parent-content child-content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent-content child-content])), :doc "Given a parent and child contents, prepends each of the children to all of the parents. If there is more than one node in the parent content, clones the children for the additional parents. Returns the parent content.", :test true}, styles {:protocol-inline nil, :name domina/styles, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 14, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any cljs.core/IMap}, :variadic false, :max-fixed-arity 1}), :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns a map of the CSS styles/values. Assumes content will be a single node. Style names are returned as keywords.", :test true}, by-class {:protocol-inline nil, :name domina/by-class, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 16, :method-params ([class-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([class-name])), :doc "Returns content containing nodes which have the specified CSS class.", :test true}, attrs {:protocol-inline nil, :name domina/attrs, :variadic false, :file "resources/public/js/ms/compiled/out/domina.cljs", :end-column 13, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([content])), :doc "Returns a map of the HTML attributes/values. Assumes content will be a single node. Attribute names are returned as keywords.", :test true}, re-tbody {:file "resources/public/js/ms/compiled/out/domina.cljs", :line 23, :column 1, :end-line 23, :end-column 15, :test true, :name domina/re-tbody}}, :name domina, :doc nil, :excludes #{clone}, :use-macros nil, :require-macros {domina.macros domina.macros, dm domina.macros}, :uses nil, :requires {goog.dom.forms goog.dom.forms, goog.dom goog.dom, goog.dom.classes goog.dom.classes, xml goog.dom.xml, dom goog.dom, classes goog.dom.classes, forms goog.dom.forms, goog.string goog.string, cljs.core cljs.core, support domina.support, events goog.events, string goog.string, domina.support domina.support, style goog.style, goog.style goog.style, cstring clojure.string, clojure.string clojure.string, goog.events goog.events, goog.dom.xml goog.dom.xml, core cljs.core}, :imports nil}