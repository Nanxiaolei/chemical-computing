;; Analyzed by ClojureScript 0.0-2850
{:defs {network {:protocol-inline nil, :name mail-system.core/network, :variadic false, :file "src/mail_system/core.cljs", :end-column 15, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 308, :end-line 308, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, gen-mail-molecule {:protocol-inline nil, :name mail-system.core/gen-mail-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 25, :method-params ([x y val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 3}), :line 337, :end-line 337, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y val])), :test true}, adjust-collide-heading {:protocol-inline nil, :name mail-system.core/adjust-collide-heading, :variadic false, :file "src/mail_system/core.cljs", :end-column 30, :method-params ([h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([h])), :test true}, in-mail-b2 {:protocol-inline nil, :name mail-system.core/in-mail-b2, :variadic false, :file "src/mail_system/core.cljs", :end-column 18, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 326, :end-line 326, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, move-molecule {:protocol-inline nil, :name mail-system.core/move-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 21, :method-params ([p__8799 collide?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [x y d dx dy], :as molecule} collide?])), :test true}, step {:file "src/mail_system/core.cljs", :line 17, :column 1, :end-line 17, :end-column 11, :test true, :name mail-system.core/step}, molecule-reaction {:protocol-inline nil, :name mail-system.core/molecule-reaction, :variadic false, :file "src/mail_system/core.cljs", :end-column 25, :method-params ([mol-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol-state])), :test true}, gen-membrane-mol {:protocol-inline nil, :name mail-system.core/gen-membrane-mol, :variadic false, :file "src/mail_system/core.cljs", :end-column 24, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 389, :end-line 389, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, height {:file "src/mail_system/core.cljs", :line 14, :column 1, :end-line 14, :end-column 13, :test true, :name mail-system.core/height}, crash {:protocol-inline nil, :name mail-system.core/crash, :variadic false, :file "src/mail_system/core.cljs", :end-column 13, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 330, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, clear {:protocol-inline nil, :name mail-system.core/clear, :variadic false, :file "src/mail_system/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, tick {:protocol-inline nil, :name mail-system.core/tick, :variadic false, :file "src/mail_system/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 267, :end-line 267, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, higher-order-capture {:protocol-inline nil, :name mail-system.core/higher-order-capture, :variadic false, :file "src/mail_system/core.cljs", :end-column 28, :method-params ([fn-mol val-mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fn-mol val-mol])), :test true}, gen-server-crash-molecule {:protocol-inline nil, :name mail-system.core/gen-server-crash-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 33, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 344, :end-line 344, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, setText {:protocol-inline nil, :name mail-system.core/setText, :variadic false, :file "src/mail_system/core.cljs", :end-column 15, :method-params ([context color style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 33, :end-line 33, :max-fixed-arity 3, :fn-var true, :arglists (quote ([context color style])), :test true}, run {:protocol-inline nil, :name mail-system.core/run, :variadic false, :file "src/mail_system/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 281, :end-line 281, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, setup-mols {:protocol-inline nil, :name mail-system.core/setup-mols, :variadic false, :file "src/mail_system/core.cljs", :end-column 18, :method-params ([init-mols]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([init-mols])), :test true}, higher-order-reaction {:protocol-inline nil, :name mail-system.core/higher-order-reaction, :variadic false, :file "src/mail_system/core.cljs", :end-column 29, :method-params ([mol1 mol2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mol1 mol2])), :test true}, gen-server-molecule {:protocol-inline nil, :name mail-system.core/gen-server-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 27, :method-params ([x y val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 3}), :line 401, :end-line 401, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x y val])), :test true}, mail-system {:protocol-inline nil, :name mail-system.core/mail-system, :variadic false, :file "src/mail_system/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 480, :end-line 480, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, higher-order-eval {:protocol-inline nil, :name mail-system.core/higher-order-eval, :variadic false, :file "src/mail_system/core.cljs", :end-column 25, :method-params ([fn-mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn-mol])), :test true}, in-mail-a2 {:protocol-inline nil, :name mail-system.core/in-mail-a2, :variadic false, :file "src/mail_system/core.cljs", :end-column 18, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 318, :end-line 318, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, in-mailboxes {:file "src/mail_system/core.cljs", :line 256, :column 1, :end-line 256, :end-column 19, :test true, :name mail-system.core/in-mailboxes}, gen-server-crash {:protocol-inline nil, :name mail-system.core/gen-server-crash, :variadic false, :file "src/mail_system/core.cljs", :end-column 24, :method-params ([to n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 431, :end-line 431, :max-fixed-arity 2, :fn-var true, :arglists (quote ([to n])), :test true}, server-a {:protocol-inline nil, :name mail-system.core/server-a, :variadic false, :file "src/mail_system/core.cljs", :end-column 16, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 296, :end-line 296, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, collision-reaction {:protocol-inline nil, :name mail-system.core/collision-reaction, :variadic false, :file "src/mail_system/core.cljs", :end-column 26, :method-params ([mstate collision-mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 231, :end-line 231, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mstate collision-mol])), :test true}, find-collision {:protocol-inline nil, :name mail-system.core/find-collision, :variadic false, :file "src/mail_system/core.cljs", :end-column 22, :method-params ([molecule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([molecule])), :test true}, server-b {:protocol-inline nil, :name mail-system.core/server-b, :variadic false, :file "src/mail_system/core.cljs", :end-column 16, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 302, :end-line 302, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, add-mols-to-system {:protocol-inline nil, :name mail-system.core/add-mols-to-system, :variadic false, :file "src/mail_system/core.cljs", :end-column 26, :method-params ([mols]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 483, :end-line 483, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mols])), :test true}, collide? {:protocol-inline nil, :name mail-system.core/collide?, :variadic false, :file "src/mail_system/core.cljs", :end-column 16, :method-params ([molecule x y molecule-d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 4}), :line 120, :end-line 120, :max-fixed-arity 4, :fn-var true, :arglists (quote ([molecule x y molecule-d])), :test true}, draw-molecule {:protocol-inline nil, :name mail-system.core/draw-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 21, :method-params ([p__8794]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y d val color args]}])), :test true}, draw-molecules {:protocol-inline nil, :name mail-system.core/draw-molecules, :variadic false, :file "src/mail_system/core.cljs", :end-column 22, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :test true}, gen-network-molecule {:protocol-inline nil, :name mail-system.core/gen-network-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 28, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 377, :end-line 377, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, width {:file "src/mail_system/core.cljs", :line 13, :column 1, :end-line 13, :end-column 12, :test true, :name mail-system.core/width}, start {:protocol-inline nil, :name mail-system.core/start, :variadic false, :file "src/mail_system/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 287, :end-line 287, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, background {:file "src/mail_system/core.cljs", :line 15, :column 1, :end-line 15, :end-column 17, :test true, :name mail-system.core/background}, colors {:file "src/mail_system/core.cljs", :line 18, :column 1, :end-line 18, :end-column 13, :test true, :name mail-system.core/colors}, in-mail-b1 {:protocol-inline nil, :name mail-system.core/in-mail-b1, :variadic false, :file "src/mail_system/core.cljs", :end-column 18, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 322, :end-line 322, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, gen-messages {:protocol-inline nil, :name mail-system.core/gen-messages, :variadic false, :file "src/mail_system/core.cljs", :end-column 20, :method-params ([to n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 424, :end-line 424, :max-fixed-arity 2, :fn-var true, :arglists (quote ([to n])), :test true}, mol-id-counter {:file "src/mail_system/core.cljs", :line 21, :column 1, :end-line 21, :end-column 21, :test true, :name mail-system.core/mol-id-counter}, hatch {:protocol-inline nil, :name mail-system.core/hatch, :variadic false, :file "src/mail_system/core.cljs", :end-column 13, :method-params ([mstate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 220, :end-line 220, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mstate])), :test true}, gen-inactive-server-molecule {:protocol-inline nil, :name mail-system.core/gen-inactive-server-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 36, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 413, :end-line 413, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, running {:file "src/mail_system/core.cljs", :line 20, :column 1, :end-line 20, :end-column 14, :test true, :name mail-system.core/running}, time-loop {:protocol-inline nil, :name mail-system.core/time-loop, :variadic false, :file "src/mail_system/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 0}), :line 275, :end-line 275, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, gen-molecule-by-val {:protocol-inline nil, :name mail-system.core/gen-molecule-by-val, :variadic false, :file "src/mail_system/core.cljs", :end-column 27, :method-params ([val x y d move-direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 5}), :line 148, :end-line 148, :max-fixed-arity 5, :fn-var true, :arglists (quote ([val x y d move-direction])), :test true}, canvas {:file "src/mail_system/core.cljs", :line 11, :column 1, :end-line 11, :end-column 13, :test true, :name mail-system.core/canvas}, more-mail {:protocol-inline nil, :name mail-system.core/more-mail, :variadic false, :file "src/mail_system/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 488, :end-line 488, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, gen-molecule {:protocol-inline nil, :name mail-system.core/gen-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 20, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :test true}, hatch? {:protocol-inline nil, :name mail-system.core/hatch?, :variadic false, :file "src/mail_system/core.cljs", :end-column 14, :method-params ([mstate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean clj-nil}, :variadic false, :max-fixed-arity 1}), :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mstate])), :test true}, mail-system-mols {:file "src/mail_system/core.cljs", :line 444, :column 1, :end-line 444, :end-column 23, :test true, :name mail-system.core/mail-system-mols}, higher-order-compare {:protocol-inline nil, :name mail-system.core/higher-order-compare, :variadic false, :file "src/mail_system/core.cljs", :end-column 28, :method-params ([mol1 mol2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mol1 mol2])), :test true}, world {:file "src/mail_system/core.cljs", :line 19, :column 1, :end-line 19, :end-column 16, :test true, :name mail-system.core/world}, gen-molecules {:protocol-inline nil, :name mail-system.core/gen-molecules, :variadic false, :file "src/mail_system/core.cljs", :end-column 21, :method-params ([vals]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vals])), :test true}, setLoading {:protocol-inline nil, :name mail-system.core/setLoading, :variadic false, :file "src/mail_system/core.cljs", :end-column 18, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :test true}, fixes {:protocol-inline nil, :name mail-system.core/fixes, :variadic false, :file "src/mail_system/core.cljs", :end-column 13, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 333, :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, measurement {:protocol-inline nil, :name mail-system.core/measurement, :variadic false, :file "src/mail_system/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 264, :end-line 264, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, stop {:protocol-inline nil, :name mail-system.core/stop, :variadic false, :file "src/mail_system/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 290, :end-line 290, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, react-fn-ready-to-eval? {:protocol-inline nil, :name mail-system.core/react-fn-ready-to-eval?, :variadic false, :file "src/mail_system/core.cljs", :end-column 31, :method-params ([react-fn arglist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([react-fn arglist])), :test true}, setColor {:protocol-inline nil, :name mail-system.core/setColor, :variadic false, :file "src/mail_system/core.cljs", :end-column 16, :method-params ([context color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 29, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context color])), :test true}, in-mail-a1 {:protocol-inline nil, :name mail-system.core/in-mail-a1, :variadic false, :file "src/mail_system/core.cljs", :end-column 18, :method-params ([mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol])), :test true}, more-server-crashes {:protocol-inline nil, :name mail-system.core/more-server-crashes, :variadic false, :file "src/mail_system/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 495, :end-line 495, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, opacity {:file "src/mail_system/core.cljs", :line 16, :column 1, :end-line 16, :end-column 14, :test true, :name mail-system.core/opacity}, rand-dx-dy {:protocol-inline nil, :name mail-system.core/rand-dx-dy, :variadic false, :file "src/mail_system/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 0}), :line 115, :end-line 115, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, gen-server-fixes-molecule {:protocol-inline nil, :name mail-system.core/gen-server-fixes-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 33, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 355, :end-line 355, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, gen-in-mailbox-molecule {:protocol-inline nil, :name mail-system.core/gen-in-mailbox-molecule, :variadic false, :file "src/mail_system/core.cljs", :end-column 31, :method-params ([x y val mailbox-address]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 4}), :line 365, :end-line 365, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x y val mailbox-address])), :test true}, context {:file "src/mail_system/core.cljs", :line 12, :column 1, :end-line 12, :end-column 14, :test true, :name mail-system.core/context}, draw-circle {:protocol-inline nil, :name mail-system.core/draw-circle, :variadic false, :file "src/mail_system/core.cljs", :end-column 19, :method-params ([context color diam x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 5}), :line 47, :end-line 47, :max-fixed-arity 5, :fn-var true, :arglists (quote ([context color diam x y])), :test true}, gen-server-fixes {:protocol-inline nil, :name mail-system.core/gen-server-fixes, :variadic false, :file "src/mail_system/core.cljs", :end-column 24, :method-params ([to n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 437, :end-line 437, :max-fixed-arity 2, :fn-var true, :arglists (quote ([to n])), :test true}}, :name mail-system.core, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, >! cljs.core.async}, :requires {ev enfocus.events, enfocus.events enfocus.events, ef enfocus.core, enfocus.core enfocus.core, cljs.core.async cljs.core.async}, :imports nil}