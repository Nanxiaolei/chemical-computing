;; Analyzed by ClojureScript 0.0-2850
{:defs {gen-function-molecule {:protocol-inline nil, :name higher-order.core/gen-function-molecule, :variadic false, :file "src/higher_order/core.cljs", :end-column 29, :method-params ([fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn])), :test true}, max-reaction {:protocol-inline nil, :name higher-order.core/max-reaction, :variadic false, :file "src/higher_order/core.cljs", :end-column 20, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 250, :end-line 250, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}, move-molecule {:protocol-inline nil, :name higher-order.core/move-molecule, :variadic false, :file "src/higher_order/core.cljs", :end-column 21, :method-params ([p__36231 collide?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [x y dx dy], :as molecule} collide?])), :test true}, step {:file "src/higher_order/core.cljs", :line 20, :column 1, :end-line 20, :end-column 11, :test true, :name higher-order.core/step}, molecule-reaction {:protocol-inline nil, :name higher-order.core/molecule-reaction, :variadic false, :file "src/higher_order/core.cljs", :end-column 25, :method-params ([mol-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 1}), :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mol-state])), :test true}, pick-color {:protocol-inline nil, :name higher-order.core/pick-color, :variadic false, :file "src/higher_order/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 82, :end-line 82, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, height {:file "src/higher_order/core.cljs", :line 16, :column 1, :end-line 16, :end-column 13, :test true, :name higher-order.core/height}, example-primes-mols {:file "src/higher_order/core.cljs", :line 261, :column 1, :end-line 261, :end-column 26, :test true, :name higher-order.core/example-primes-mols}, clear {:protocol-inline nil, :name higher-order.core/clear, :variadic false, :file "src/higher_order/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 0}), :line 41, :end-line 41, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, tick {:protocol-inline nil, :name higher-order.core/tick, :variadic false, :file "src/higher_order/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 206, :end-line 206, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, higher-order-capture {:protocol-inline nil, :name higher-order.core/higher-order-capture, :variadic false, :file "src/higher_order/core.cljs", :end-column 28, :method-params ([fn-mol val-mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fn-mol val-mol])), :test true}, prime-reaction {:protocol-inline nil, :name higher-order.core/prime-reaction, :variadic false, :file "src/higher_order/core.cljs", :end-column 22, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 238, :end-line 238, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}, setText {:protocol-inline nil, :name higher-order.core/setText, :variadic false, :file "src/higher_order/core.cljs", :end-column 15, :method-params ([context color style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 32, :end-line 32, :max-fixed-arity 3, :fn-var true, :arglists (quote ([context color style])), :test true}, example-primes-reducing-mols {:file "src/higher_order/core.cljs", :line 265, :column 1, :end-line 265, :end-column 35, :test true, :name higher-order.core/example-primes-reducing-mols}, run {:protocol-inline nil, :name higher-order.core/run, :variadic false, :file "src/higher_order/core.cljs", :end-column 11, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 220, :end-line 220, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, setup-mols {:protocol-inline nil, :name higher-order.core/setup-mols, :variadic false, :file "src/higher_order/core.cljs", :end-column 18, :method-params ([init-mols]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([init-mols])), :test true}, higher-order-reaction {:protocol-inline nil, :name higher-order.core/higher-order-reaction, :variadic false, :file "src/higher_order/core.cljs", :end-column 29, :method-params ([mol1 mol2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mol1 mol2])), :test true}, restart {:protocol-inline nil, :name higher-order.core/restart, :variadic false, :file "src/higher_order/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 232, :end-line 232, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, max-to-50 {:protocol-inline nil, :name higher-order.core/max-to-50, :variadic false, :file "src/higher_order/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 297, :end-line 297, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, higher-order-eval {:protocol-inline nil, :name higher-order.core/higher-order-eval, :variadic false, :file "src/higher_order/core.cljs", :end-column 25, :method-params ([fn-mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fn-mol])), :test true}, small-example-max {:protocol-inline nil, :name higher-order.core/small-example-max, :variadic false, :file "src/higher_order/core.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 293, :end-line 293, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, collision-reaction {:protocol-inline nil, :name higher-order.core/collision-reaction, :variadic false, :file "src/higher_order/core.cljs", :end-column 26, :method-params ([mstate collision-mol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 170, :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mstate collision-mol])), :test true}, reducing-primes-to-50 {:protocol-inline nil, :name higher-order.core/reducing-primes-to-50, :variadic false, :file "src/higher_order/core.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 289, :end-line 289, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, find-collision {:protocol-inline nil, :name higher-order.core/find-collision, :variadic false, :file "src/higher_order/core.cljs", :end-column 22, :method-params ([molecule]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([molecule])), :test true}, collide? {:protocol-inline nil, :name higher-order.core/collide?, :variadic false, :file "src/higher_order/core.cljs", :end-column 16, :method-params ([molecule x y molecule-d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 4}), :line 90, :end-line 90, :max-fixed-arity 4, :fn-var true, :arglists (quote ([molecule x y molecule-d])), :test true}, draw-molecule {:protocol-inline nil, :name higher-order.core/draw-molecule, :variadic false, :file "src/higher_order/core.cljs", :end-column 21, :method-params ([p__36197]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 1}), :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y val color args]}])), :test true}, draw-molecules {:protocol-inline nil, :name higher-order.core/draw-molecules, :variadic false, :file "src/higher_order/core.cljs", :end-column 22, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state])), :test true}, higher-order-arg-exchange {:protocol-inline nil, :name higher-order.core/higher-order-arg-exchange, :variadic false, :file "src/higher_order/core.cljs", :end-column 33, :method-params ([fn-mol1 fn-mol2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fn-mol1 fn-mol2])), :test true}, width {:file "src/higher_order/core.cljs", :line 15, :column 1, :end-line 15, :end-column 12, :test true, :name higher-order.core/width}, start {:protocol-inline nil, :name higher-order.core/start, :variadic false, :file "src/higher_order/core.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 226, :end-line 226, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, background {:file "src/higher_order/core.cljs", :line 17, :column 1, :end-line 17, :end-column 17, :test true, :name higher-order.core/background}, colors {:file "src/higher_order/core.cljs", :line 21, :column 1, :end-line 21, :end-column 13, :test true, :name higher-order.core/colors}, mol-id-counter {:file "src/higher_order/core.cljs", :line 24, :column 1, :end-line 24, :end-column 21, :test true, :name higher-order.core/mol-id-counter}, hatch {:protocol-inline nil, :name higher-order.core/hatch, :variadic false, :file "src/higher_order/core.cljs", :end-column 13, :method-params ([mstate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 1}), :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mstate])), :test true}, running {:file "src/higher_order/core.cljs", :line 23, :column 1, :end-line 23, :end-column 14, :test true, :name higher-order.core/running}, time-loop {:protocol-inline nil, :name higher-order.core/time-loop, :variadic false, :file "src/higher_order/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 0}), :line 214, :end-line 214, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, canvas {:file "src/higher_order/core.cljs", :line 13, :column 1, :end-line 13, :end-column 13, :test true, :name higher-order.core/canvas}, gen-molecule {:protocol-inline nil, :name higher-order.core/gen-molecule, :variadic false, :file "src/higher_order/core.cljs", :end-column 20, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :test true}, hatch? {:protocol-inline nil, :name higher-order.core/hatch?, :variadic false, :file "src/higher_order/core.cljs", :end-column 14, :method-params ([mstate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean clj-nil}, :variadic false, :max-fixed-arity 1}), :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mstate])), :test true}, world {:file "src/higher_order/core.cljs", :line 22, :column 1, :end-line 22, :end-column 16, :test true, :name higher-order.core/world}, gen-molecules {:protocol-inline nil, :name higher-order.core/gen-molecules, :variadic false, :file "src/higher_order/core.cljs", :end-column 21, :method-params ([vals]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vals])), :test true}, reducing-max-to-50 {:protocol-inline nil, :name higher-order.core/reducing-max-to-50, :variadic false, :file "src/higher_order/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 305, :end-line 305, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, setLoading {:protocol-inline nil, :name higher-order.core/setLoading, :variadic false, :file "src/higher_order/core.cljs", :end-column 18, :method-params ([context]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([context])), :test true}, measurement {:protocol-inline nil, :name higher-order.core/measurement, :variadic false, :file "src/higher_order/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 0}), :line 200, :end-line 200, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, example-maxs-mols {:file "src/higher_order/core.cljs", :line 269, :column 1, :end-line 269, :end-column 24, :test true, :name higher-order.core/example-maxs-mols}, stop {:protocol-inline nil, :name higher-order.core/stop, :variadic false, :file "src/higher_order/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 229, :end-line 229, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, react-fn-ready-to-eval? {:protocol-inline nil, :name higher-order.core/react-fn-ready-to-eval?, :variadic false, :file "src/higher_order/core.cljs", :end-column 31, :method-params ([react-fn arglist]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([react-fn arglist])), :test true}, setColor {:protocol-inline nil, :name higher-order.core/setColor, :variadic false, :file "src/higher_order/core.cljs", :end-column 16, :method-params ([context color]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([context color])), :test true}, opacity {:file "src/higher_order/core.cljs", :line 19, :column 1, :end-line 19, :end-column 14, :test true, :name higher-order.core/opacity}, max-reaction-reducing {:protocol-inline nil, :name higher-order.core/max-reaction-reducing, :variadic false, :file "src/higher_order/core.cljs", :end-column 29, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 253, :end-line 253, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}, rand-dx-dy {:protocol-inline nil, :name higher-order.core/rand-dx-dy, :variadic false, :file "src/higher_order/core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 0}), :line 85, :end-line 85, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, example-maxs-reducing-mols {:file "src/higher_order/core.cljs", :line 273, :column 1, :end-line 273, :end-column 33, :test true, :name higher-order.core/example-maxs-reducing-mols}, primes-to-50 {:protocol-inline nil, :name higher-order.core/primes-to-50, :variadic false, :file "src/higher_order/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 285, :end-line 285, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, small-example-primes {:protocol-inline nil, :name higher-order.core/small-example-primes, :variadic false, :file "src/higher_order/core.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 277, :end-line 277, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, context {:file "src/higher_order/core.cljs", :line 14, :column 1, :end-line 14, :end-column 14, :test true, :name higher-order.core/context}, draw-circle {:protocol-inline nil, :name higher-order.core/draw-circle, :variadic false, :file "src/higher_order/core.cljs", :end-column 19, :method-params ([context color diam x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 5}), :line 46, :end-line 46, :max-fixed-arity 5, :fn-var true, :arglists (quote ([context color diam x y])), :test true}, small-example-primes-reducing {:protocol-inline nil, :name higher-order.core/small-example-primes-reducing, :variadic false, :file "src/higher_order/core.cljs", :end-column 37, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 281, :end-line 281, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, prime-reaction-reducing {:protocol-inline nil, :name higher-order.core/prime-reaction-reducing, :variadic false, :file "src/higher_order/core.cljs", :end-column 31, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 244, :end-line 244, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :test true}, small-example-max-reducing {:protocol-inline nil, :name higher-order.core/small-example-max-reducing, :variadic false, :file "src/higher_order/core.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 0}), :line 301, :end-line 301, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, d {:file "src/higher_order/core.cljs", :line 18, :column 1, :end-line 18, :end-column 8, :test true, :name higher-order.core/d}}, :name higher-order.core, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, >! cljs.core.async, alts! cljs.core.async}, :requires {ev enfocus.events, enfocus.events enfocus.events, ef enfocus.core, enfocus.core enfocus.core, cljs.core.async cljs.core.async}, :imports nil}